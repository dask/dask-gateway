# This is a GitHub workflow defining a set of jobs with a set of steps.
# ref: https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
#
name: Test

on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - "**.rst"
      - ".github/workflows/*"
      - "!.github/workflows/test.yaml"
  push:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - "**.rst"
      - ".github/workflows/*"
      - "!.github/workflows/test.yaml"
    branches-ignore:
      - "dependabot/**"
      - "pre-commit-ci-update-config"
    tags: ["**"]
  workflow_dispatch:

env:
  commit_msg: ${{ github.event.head_commit.message }}

jobs:
  main-tests:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # We test against different versions of Python and Golang, but not
          # against different versions of Node.
          #
          # - The Python version installed where dask-gateway and
          #   dask-gateway-proxy is run by the end user matters, so we test
          #   against all the versions we intend to support.
          #
          #   We could for example choose to test against the versions that
          #   hasn't reached end of life yet: https://endoflife.date/python.
          #
          # - The Golang version that compiles
          #   dask-gateway-server/dask-gateway-proxy bundled for the
          #   dask-gateway-server Python package is the only thing that matters.
          #   Due to that, we can test fewer versions of Golang.
          #
          #   We could for example choose to test against the versions that
          #   hasn't reached end of life yet: https://endoflife.date/go.
          #
          # - Node is a dependency for JupyterHub's configurable-http-proxy that
          #   we test integration with. We can test against only one version and
          #   that would be fine.
          #
          - python-version: "3.7"
            go-version: "1.15"
          - python-version: "3.8"
            go-version: "1.16"
          - python-version: "3.9"
            go-version: "1.17"
          - python-version: "3.10"
            go-version: "1.18"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "${{ matrix.python-version }}"
      - uses: actions/setup-go@v3
        with:
          go-version: "${{ matrix.go-version }}"
      - uses: actions/setup-node@v3

      # jupyterhub will when being mock started as part of running tests depend
      # on the Node npm package configurable-http-proxy.
      #
      - name: Install jupyterhub with system dependencies
        run: |
          npm install -g configurable-http-proxy
          pip install jupyterhub

      - name: Install Python test requirements
        run: |
          cd tests
          pip install -r requirements.txt

      - name: List Python packages
        run: |
          pip freeze

      - name: Run Python tests
        run: |
          pytest -v tests/ -k 'not kubernetes'

      - name: Install Go test requirements
        run: |
          cd dask-gateway-server/dask-gateway-proxy
          go get github.com/stretchr/testify/assert

      - name: Run Go tests
        run: |
          cd dask-gateway-server/dask-gateway-proxy
          go test

  kubernetes-tests:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # We run this job multiple times with different parameterization
        # specified below, these parameters have no meaning on their own and
        # gain meaning on how job steps use them.
        #
        # k3s-version: https://github.com/rancher/k3s/tags
        # k3s-channel: https://update.k3s.io/v1-release/channels
        #
        include:
          - k3s-channel: v1.20
          - k3s-channel: v1.21
          - k3s-channel: v1.22
          - k3s-channel: v1.23
    steps:
      - uses: actions/checkout@v3

      # Starts a k8s cluster with NetworkPolicy enforcement and installs both
      # kubectl and helm
      #
      # ref: https://github.com/jupyterhub/action-k3s-helm/
      #
      - uses: jupyterhub/action-k3s-helm@v1
        with:
          k3s-channel: ${{ matrix.k3s-channel }}
          metrics-enabled: false
          traefik-enabled: false
          docker-enabled: true

      - name: Helm lint and render templates
        run: |
          ./continuous_integration/kubernetes/helm-lint-and-template.sh

      - name: Helm Install
        run: |
          ./continuous_integration/kubernetes/helm-install.sh

      - name: Install Python test requirements
        run: |
          cd tests
          pip install -r requirements.txt

      - name: List Python packages
        run: |
          pip list

      - name: Kubernetes Tests
        run: |
          TEST_DASK_GATEWAY_KUBE=true \
          TEST_DASK_GATEWAY_KUBE_ADDRESS=http://localhost:30200/services/dask-gateway/ \
          pytest -v tests/kubernetes/

      # ref: https://github.com/jupyterhub/action-k8s-namespace-report
      - name: Kubernetes namespace report
        uses: jupyterhub/action-k8s-namespace-report@v1
        if: always()
        with:
          important-workloads: >-
            deploy/api-test-dask-gateway
            deploy/controller-test-dask-gateway
            deploy/traefik-test-dask-gateway

  # The tests run in this job rely on by setting up a development environment in
  # a pre-built container.
  #
  hadoop-tests:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read

    steps:
      - uses: actions/checkout@v3

      - name: Login to ghcr.io read access to CI image
        run: echo "${{ secrets.github_token }}" | docker login ghcr.io -u $ --password-stdin

      - name: Start Hadoop Yarn container and mount local git repo
        run: ./continuous_integration/docker/hadoop/start.sh

      - name: Install test requirements (inside container)
        run: ./continuous_integration/docker/hadoop/install.sh

      - name: Run tests (inside container)
        run: ./continuous_integration/docker/hadoop/test.sh

      - name: Print logs for debugging
        if: always()
        run: ./continuous_integration/docker/hadoop/print_logs.sh

  # The tests run in this job rely on by setting up a development environment in
  # a pre-built container.
  #
  pbs-tests:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read

    steps:
      - uses: actions/checkout@v3

      - name: Login to ghcr.io read access to CI image
        run: echo "${{ secrets.github_token }}" | docker login ghcr.io -u $ --password-stdin

      - name: Start PBS container and mount local git repo
        run: ./continuous_integration/docker/pbs/start.sh

      - name: Install test requirements (inside container)
        run: ./continuous_integration/docker/pbs/install.sh

      - name: Run tests (inside container)
        run: ./continuous_integration/docker/pbs/test.sh

      - name: Print logs for debugging
        if: always()
        run: ./continuous_integration/docker/pbs/print_logs.sh

  # The tests run in this job rely on by setting up a development environment in
  # a pre-built container.
  #
  slurm-tests:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read

    steps:
      - uses: actions/checkout@v3

      - name: Login to ghcr.io read access to CI image
        run: echo "${{ secrets.github_token }}" | docker login ghcr.io -u $ --password-stdin

      - name: Start Slurm container and mount local git repo
        run: ./continuous_integration/docker/slurm/start.sh

      - name: Install test requirements (inside container)
        run: ./continuous_integration/docker/slurm/install.sh

      - name: Run tests (inside container)
        run: ./continuous_integration/docker/slurm/test.sh

      - name: Print logs for debugging
        if: always()
        run: ./continuous_integration/docker/slurm/print_logs.sh
